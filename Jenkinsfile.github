library(
  identifier: 'jenkins-shared-library@master',
  retriever: modernSCM(
    [
      $class: 'GitSCMSource',
      remote: 'https://github.com/dhanarab/jenkins-pipeline-library.git'
    ]
  )
)

githubOwner = 'AccelByte'
githubRepo = 'accelbyte-python-modular-sdk'
githubSsh = 'accelbyte-sdk-sdkbuild-ssh'
githubPat = 'accelbyte-sdk-sdkbuild-pat-github'
bitbucketSsh = 'bitbucket-build-extend-ssh'

githubUrl = "git@github.com:${githubOwner}/${githubRepo}.git"

jobChannel = env.SLACK_CHANNEL_ACTIVITY_EXTEND_CODEGEN_MODULAR_SDK ? env.SLACK_CHANNEL_ACTIVITY_EXTEND_CODEGEN_MODULAR_SDK : "#activity-justice-codegen-modular-sdk"

pipeline {
  agent {
    label "extend-builder-batch"
  }
  stages {
    stage('Prepare') {
      steps {
        script {
          currentBuild.displayName = "#${env.BUILD_NUMBER} ${params.ACTION}"
          gitHost = sh(script: "echo '${githubUrl}' | grep -oP '(?<=@).+(?=:)'", returnStdout: true).trim()
          sh "grep -q ${gitHost} ~/.ssh/known_hosts || ssh-keyscan ${gitHost} | tee -a ~/.ssh/known_hosts"
        }
      }
    }
    stage('Push') {
      when {
        expression { 
          return params.ACTION == 'PUSH'
        }
      }
      steps {
        script {
          sh "git checkout master"
          sshagent(credentials: [githubSsh])
          {
            sh "git push ${githubUrl} HEAD:main"
          }
        }
      }
    }
    stage('Release') {
      when {
        expression { 
          return params.ACTION == 'PUSH+RELEASE'
        }
      }
      steps {
        script {
          releaseNote = params.RELEASE_NOTE

          if (params.AGS_VERSION != "None") {
            releaseNote = releaseNote.replace('@VERSION@', params.AGS_VERSION)
          }

          if (releaseNote ==~ /(?s).*@[A-Za-z0-9_-]+@.*/)
          {
            echo 'Release note still contains one or more template placeholders e.g. @VERSION@, etc. Please check.'
            sh 'false' // Fail this job
          }

          sh "git checkout ${params.RELEASE_BRANCH}"
          sshagent(credentials: [githubSsh])
          {
            if (params.RELEASE_BRANCH == "master") {
              
              echo "Check if tag `ags/v${params.AGS_VERSION}` is exists"
              def tagCheck = sh(script: "git tag | grep 'ags/v${params.AGS_VERSION}'", returnStdout: true, returnStatus: true)
              if (tagCheck == "") {
                echo "AGS version tag 'ags/v${params.AGS_VERSION}' does not exists in source repository." 
                sh 'false' // Fail this job
              }

              echo 'Push bitbucket master to github main'
              sh "git push ${githubUrl} HEAD:main"

              echo "Tag github main with ags version"
              sh "git push ${githubUrl} 'ags/v${params.AGS_VERSION}'"

              echo "Get all tags related to `ags/v${params.AGS_VERSION}` and push them"
              sh "git tag --contains \$(git rev-list -n 1 'ags/v${params.AGS_VERSION}') | grep -v 'ags/v${params.AGS_VERSION}' | xargs -I{} sh -c 'git push ${githubUrl} '{}' || exit 255'"

              releaseName = "AccelByte Python Extend Modular SDK for AGS v${params.AGS_VERSION}"
              github.createRelease(githubPat, githubOwner, githubRepo, "ags/v${params.AGS_VERSION}", releaseName, releaseNote)

              withCredentials([file(credentialsId: 'justice-codegen-sdk-pypirc', variable: 'PYPIRC_PATH')]) {
                sh "sudo apt install -y jq"
                sh 'make build_all upload_all PYPIRC_PATH=$PYPIRC_PATH'
              }
            }
            else {
              sh "git push ${githubUrl} HEAD:${params.RELEASE_BRANCH}"
              //Point release will be implemented later.
            }
          }
        }
      }
    }
    stage('Pull') {
      when {
        expression { 
          return params.ACTION == 'PULL'
        }
      }
      steps {
        script {
          sh "git checkout master"
          sshagent(credentials: [githubSsh])
          {
            sh "git pull ${githubUrl} main"
          }
          sshagent(credentials: [bitbucketSsh])
          {
            sh "git push"
          }
        }
      }
    }
  }
  post {
    failure {
      script {
        message = """
            :no_entry: <${env.BUILD_URL}|${env.JOB_NAME}-${env.BUILD_NUMBER}> *failed*
            
            |*Action*
            |${params.ACTION}
            
            |""".stripMargin()
        slackSend(channel: jobChannel, color: '#FF0000', message: message)
      }
    }
  }
}
